Linear Search:
1. Write a program to search a certain name is the given array using linear search
ans: import java.util.Scanner;
    public class LinearSearch {
    
    	public static void main(String[] args) {
    		Scanner sc = new Scanner(System.in);
    		String[] names = {"Aryan", "shiva", "Aman", "lal", "Aaron", "James"};
    		System.out.print("Enter the name to search: ");
    		String name = sc.next().toLowerCase();
    		if(linearSearch(names,name)>0) {
    			System.out.print(name+ " is present at position: "+linearSearch(names,name));
    		}else {
    			System.out.println(name+" is not present in the given array");
    		}
    		
    
    	}
    	
    	public static int linearSearch(String[] arr,String name) {
    		
    		for(int i=0;i<arr.length;i++) {
    			if(arr[i].equalsIgnoreCase(name)) {
    				return i+1;
    			}
    		}
    		return -1;
    	}
    
    }
Time complexity - O(n) in worst case scenerio and O(1) in best case scenerio

Binary Search:
2. Write a program to search a element in an array using binary search
ans: import java.util.Scanner;
    public class BinarySearch {
        public static void main(String[] args){
            Scanner sc = new Scanner(System.in);
            int[] arr = {2,3,4,5,6,7,8,9};
            System.out.print("Enter the element to search: ");
            int key = sc.nextInt();
            binarySearch(arr,key);
        }
        public static void binarySearch(int[]arr,int key){
            int start = 0;
            int end = arr.length-1;
            while(start<=end){
                int mid = start+(end-start)/2;
    
                if(arr[mid]==key){
                    System.out.println("Element is at position: "+(mid+1));
                    return;
                }
                if(arr[mid]>key){
                    end = mid-1;
                }else{
                    start = mid+1;
                }
            }
            System.out.println("Element not fount in the given array");
        }
    }

- Time compexity for binary = O(logn) 
- Binary search can be done only on sorted arrays


3.Write a Quick sort with first element as the pivot 
ans: import java.util.Arrays;

     public class Quicksort {
    
    	public static void main(String[] args) {
    		int[]arr = {10, 7, 8, 9, 1, 5};
    		System.out.println(Arrays.toString(arr));
    		quickSort(arr,0,arr.length-1);
    		System.out.println(Arrays.toString(arr));
    
    	}
    	public static void quickSort(int[] arr,int start,int end) {
    		if(start<end) {
    			int p = sort(arr,start,end);
    			quickSort(arr,start,p-1);  
    			quickSort(arr,p+1,end);
    		}
    	}
    	
    	public static int sort(int[]arr,int start,int end) {
    		int pivot = arr[start];     //pivot value is first element
    		int p = end;      // partition index start from end of the array
    		for(int i=end;i>start;i--) {      //traverse from end and check compare with the pivot value
    			if(arr[i]>pivot) {
    				int temp = arr[i];
    				arr[i] = arr[p];
    				arr[p--] = temp;
    			}
    		}
    		int temp = arr[p];
    		arr[p] = arr[start];
    		arr[start] = temp;      // here the pivot value and pth index value is swapped
    		
    		return p;
    	}
    
    }

Time Complexity:
    Average Case: O(N * logN), where N is the length of the array.
    Best Case: O(N * logN)
    Worst Case: O(N2)
Space complexity - O(1)

4. Write a quick sort algorithm using Random value as pivot
ans: import java.util.Arrays;
        import java.util.Random;
        
        public class QuicksortRandom {
            public static void main(String[] args){
                int[] arr = {9,3,6,2,7,1,5,8,4,10};
                System.out.println(Arrays.toString(arr));
        
                quickSort(arr,0,arr.length-1);
                for(int a:arr){
                    System.out.print(a+" ");
                }
        
            }
            public static void quickSort(int[]arr,int start,int end){
                if(start<end) {
                    int p = partition(arr, start, end);
        
                    quickSort(arr, start, p - 1);
                    quickSort(arr, p + 1, end);
        
                }
            }
            public static void random(int[]arr,int start,int end){  //this function assigns a random value to end value 
                Random rand = new Random();
                int pivot = rand.nextInt(end-start)+start;
                int temp = arr[end];
                arr[end]= arr[pivot];
                arr[pivot] = temp;
            }
            public static int partition(int[]arr,int start,int end){
                random(arr,start,end);
                int pivot = arr[end];
                int p=start;
                for(int i=start;i<end;i++){
                    if(arr[i]<pivot){
                        int temp = arr[i];
                        arr[i] = arr[p];
                        arr[p++] = temp;
                    }
                }
                int temp = arr[end];
                arr[end] = arr[p];
                arr[p] = temp;
                return p;
            }
        }

    Time Complexity -  O(n*n)
    Space Complexity -  O(n) 

5. Write prgram to count the Inversion count in Array using Merge Sort
ans: import java.util.Arrays;

    public class MergeSort {
        public static void main(String[] args){
            int[] arr = { 1, 20, 6, 4, 5 };
            System.out.println(Arrays.toString(arr));
    
            int count = mergeSort(arr,0,arr.length-1);
            System.out.println("Inversions = "+count);
            for(int a:arr){
                System.out.print(a+" ");
            }
    
        }
    
        public static int mergeSort(int[]arr,int start,int end){
            int count = 0;
            if(start<end){
                int mid = start+(end-start)/2;
                count = mergeSort(arr,start,mid);
                count = mergeSort(arr,mid+1,end);
    
                count = merge(arr,start,mid,end);
            }
            return count;
        }
        public static int merge(int[]arr,int start,int mid,int end){
            int[] merged = new int[end-start+1];
            int l = start;
            int r = mid+1;
            int k=0,swap=0;
    
            while(l<=mid && r<=end){
                if(arr[l]<=arr[r]){
                    merged[k++] = arr[l++];
                    swap++;
                }else{
                    merged[k++] = arr[r++];
                    swap++;
                }
            }
    
            while(l<=mid){
                merged[k++] = arr[l++];
                swap++;
            }
            while(r<=end){
                merged[k++] = arr[r++];
                swap++;
            }
            for(int i=0,j=start;i<merged.length;i++,j++){
                arr[j] = merged[i];
            }
            return swap;
        }
    }
Time Complexity - O(nlogn)  (algorithm is divide and conquer so the time complexity)
space cpmplexity - O(n) (because of temp array)

6. Write a program to sort a given array of Strings using bubble according to their no of letters in each word
ans:import java.util.Arrays;
    import java.util.Scanner;
    
    public class BubbleSort {
        public static void main(String[] args) {
            Scanner sc = new Scanner(System.in);
            String[] a1 = {"Christene",
                    "Tomas",
                    "Marline",
                    "Marcelluss",
                    "Michelle",
                    "Quiana",
                    "Keny" };
            sort(a1);
            System.out.println(Arrays.toString(a1));
    
        }
    
        public static void sort(String[] arr){
            int n = arr.length;
            for(int i=0;i<n-1;i++){
                for(int j=i+1;j<n;j++){
                    if(arr[i].length()>=arr[j].length()){
                        String temp = arr[i];
                        arr[i] = arr[j];
                        arr[j] = temp;
                    }
                }
            }
        }
    }

time complexity - O(n^2)
space - O(1)

7. Write a programsuch that Given an unsorted array of size N, use selection sort to sort arr[] in increasing order.
ans: import java.util.Arrays;
    import java.util.Scanner;
    
    public class SelectionSort {
        public static void main(String[] args) {
            Scanner sc = new Scanner(System.in);
            int[] a1 = {6, 5, 4, 3, 2, 1};
            System.out.print("Initial array: ");
            System.out.println(Arrays.toString(a1));
            selectionSort(a1,a1.length);
            System.out.print("Final array: ");
            System.out.println(Arrays.toString(a1));
        }
        static int  select(int[] arr, int i) // this function will select the min index
        {
            int min = i;
            for(int j=i+1;j<arr.length;j++){
                if(arr[j]<arr[min]){
                    min = j;
                }
            }
            return min;
    
        }
        static void selectionSort(int[] arr, int n)
        {
            for(int j=0;j<n-1;j++){
                int min = select(arr,j);
                //swapping the min and j index value
                int temp = arr[j];
                arr[j] = arr[min];
                arr[min] = temp;
    
            }
        }
    }

