1. Write a program to check whether the graph is tree or not
ans: import java.util.Scanner;
    public class Source {
    	public static void main(String args[]) throws Exception{
    		Scanner in = new Scanner(System.in);
    		int n = in.nextInt();
    		int sum = 0;
    		for(int i=0;i<n;i++){
    		    sum += in.nextInt();
    		}
    		if(sum == 2*(n-1)){
    		    System.out.println("Yes");
    		}else{
    		    System.out.println("No");
    		}
    		
    	}
    }

//in the above code we are checking using the theory if its tree then the sum of degrees should be
  2*(n-1)  where n is no of vertex or node

2. write a program for the BFS traversal in graph
ans:    
        import java.util.ArrayList;
        import java.util.LinkedList;
        import java.util.Queue;
        //Breadth First Search(BFS) or undirected level order traversal in undirected graph
        public class BFSGraph {
            static class edge1{
                int src;
                int dest;
                edge1(int s,int d){
                    this.src = s;
                    this.dest = d;
                }
            }
            public static void createGraph(ArrayList<edge1> graph[]){
                for(int i=0;i<graph.length;i++){
                    graph[i] = new ArrayList<edge1>();
                }
        
                graph[0].add(new edge1(0,1));
                graph[0].add(new edge1(0,2));
        
                graph[1].add(new edge1(1,0));
                graph[1].add(new edge1(1,3));
        
                graph[2].add(new edge1(2,0));
                graph[2].add(new edge1(2,4));
        
                graph[3].add(new edge1(3,1));
                graph[3].add(new edge1(3,4));
                graph[3].add(new edge1(3,5));
        
                graph[4].add(new edge1(4,2));
                graph[4].add(new edge1(4,3));
                graph[4].add(new edge1(4,5));
        
                graph[5].add(new edge1(5,3));
                graph[5].add(new edge1(5,4));
                graph[5].add(new edge1(5,6));
        
                graph[6].add(new edge1(6,5));
        
            }
        
            public static void bfs(ArrayList<edge1> graph[],int v,boolean vis[],int start){
                Queue<Integer> q = new LinkedList<>();  //Queue for adding the edges
        
                q.add(start);   //start is the starting vertex or node
                while(!q.isEmpty()){
                    int curr = q.remove();
                    if(vis[curr] == false){
                        System.out.print(curr+" ");
                        vis[curr] = true;
        
                        for(int i=0;i<graph[curr].size();i++){
                            edge1 e = graph[curr].get(i);
                            q.add(e.dest);
                        }
                    }
                }
            }
            public static void main(String[] args){
                int v = 7;
                /*  graph image
                    1----3
                   /     | \
                  0      |  5 -- 6
                   \     | /
                     2---4
                 */
                ArrayList<edge1> graph[] = new ArrayList[v];
                createGraph(graph);
                boolean vis[] = new boolean[v]; // for the visited vertex
                for(int i=0;i<v;i++){
                    if(vis[i] == false){
                        bfs(graph,v,vis,i);
                    }
                }
        
            }
        }

3.write a program to create a graph using adjacency list in unweighted graph
ans:    import java.util.ArrayList;
        import java.util.LinkedList;
        
        public class AdjacencyGraph {
            static class Edge{
                int src;
                int dest;
                Edge(int s,int d){
                    this.src = s;
                    this.dest = d;
                }
            }
            public static void creatGraph(ArrayList<Edge> graph[]){
        
                for(int i=0;i< graph.length;i++){
                    graph[i] = new ArrayList<>(); // to make the ArrayList empty instead of null value
                }
                //undirected and un-weighted graph
                graph[0].add(new Edge(0,2)); //adding the edges to the ArrayList
        
                graph[1].add(new Edge(1,2));
                graph[1].add(new Edge(1,3));
        
                graph[2].add(new Edge(2,0));
                graph[2].add(new Edge(2,1));
                graph[2].add(new Edge(2,3));
        
                graph[3].add(new Edge(3,1));
                graph[3].add(new Edge(3,2));
            }
            public static void main(String[] args){
                int v = 4;
                ArrayList<Edge> graph[] = new ArrayList[v];
                creatGraph(graph);
        
                for(int i=0;i<graph[2].size();i++){ //this prints the neighbors of the vertex 2:
                    Edge e = graph[2].get(i);
                    System.out.print(e.dest+" ");
                }
            }
        }
        
4.write a program for DFS traversal in un weighted graph
ans: 
    import java.lang.reflect.Array;
    import java.util.ArrayList;
    
    public class DFSgraph {
        static class Edge{
            int src;
            int dest;
            Edge(int s,int d){
                this.src = s;
                this.dest = d;
            }
        }
        public static void createGraph(ArrayList<Edge> graph[]){
            for(int i=0;i< graph.length;i++){  //in this we add the empty values in the graph where initially there was null values
                graph[i] = new ArrayList<Edge>();
            }
    
            graph[0].add(new Edge(0,1));
            graph[0].add(new Edge(0,2));
    
            graph[1].add(new Edge(1,0));
            graph[1].add(new Edge(1,3));
    
            graph[2].add(new Edge(2,0));
            graph[2].add(new Edge(2,4));
    
            graph[3].add(new Edge(3,1));
            graph[3].add(new Edge(3,4));
            graph[3].add(new Edge(3,5));
    
            graph[4].add(new Edge(4,2));
            graph[4].add(new Edge(4,3));
            graph[4].add(new Edge(4,5));
    
            graph[5].add(new Edge(5,3));
            graph[5].add(new Edge(5,4));
            graph[5].add(new Edge(5,6));
    
            graph[6].add(new Edge(6,5));
        }
    
        public static void dfsGraph(ArrayList<Edge> graph[],boolean vis[],int curr){
            System.out.print(curr+" ");
            vis[curr] = true;
            for(int i=0;i<graph[curr].size();i++){
                Edge e = graph[curr].get(i);
                if(vis[e.dest] == false){
                    dfsGraph(graph,vis,e.dest);
                }
            }
        }
        public static void main(String[] args){
            int v = 7;
            ArrayList<Edge> graph[] = new ArrayList[v];
            createGraph(graph);
            /*  graph image
                 1---3
               /     | \
              0      |  5 -- 6
               \     | /
                 2---4
             */
            boolean vis[] = new boolean[v];
            for(int i=0;i<v;i++){  
                if(vis[i] == false){
                    dfsGraph(graph,vis,i);
                }
            }
        }
    }
    
            
            
