1.  Find the complexity of the below program: 
static void function(int n)
{
	int count = 0;
	for (int i = n / 2; i <= n; i++)
		for (int j = 1; j <= n; j = 2 * j)
			for (int k = 1; k <= n; k = k * 2)
				count++;
}
ans: T(n) = O(nlog^2n)

2. time complexity of below code
int a = 0, i = N;
while (i > 0) {
    a += i;
    i /= 2;
}

ans: O(logn)

3.Java Program for Tower of Hanoi
ans: public class Question1 {
	public static void towerOfHanoi(int n,String src,String Dest, String helper) {
		if(n==1) {
			System.out.println("Transfer disk "+n+" from "+src+" to "+Dest);
			return;
		}
		
		towerOfHanoi(n-1,src,helper,Dest);
		System.out.println("Transfer disk "+n+" from "+src+" to "+Dest);
		towerOfHanoi(n-1,helper,Dest,src);
		
	}

	public static void main(String[] args) {
		int n=3;
		Question1.towerOfHanoi(n, "S", "D","H"); //S-Source,D-destination,H-helper

	}

}

4. Write an algorithm to swap two given numbers in Java without using a temporary variable.
ans: public class sum {
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the first number");
        int a = sc.nextInt();
        System.out.println("Enter the second number");
        int b = sc.nextInt();

        a = a-b;
        b = a+b;
        a = b-a;
        System.out.println("a = "+a+" b = "+b);

        //using xor we can do
        a = a^b;
        b = a^b;
        a = a^b;
        System.out.println("XOR method: "+"a = "+a+" b = "+b);
    }
}

5.Find the occurence of first and last element in an String
ans: public class Recursion {
    public static int first = -1;
    public static int last = -1;
    public static void findOccurence(String str,int idx,char element){
        if(str.length() == idx){
            System.out.println("first occurence = "+first);
            System.out.println("last occurence = "+last);
            return;
        }
        char current = str.charAt(idx);
        if(current == element){
            if(first == -1){
                first = idx;
            }else{
                last = idx;
            }
        }

        findOccurence(str,idx+1,element);
    }
    public static void main(String[] args){
        String str = "abaabchefhaail";
        findOccurence(str,0,'a');
    }
}

time complexity = O(n) of the above code

6. Write a program for array rotation with d index rotation using O(d) space complexity
ans: import java.util.Arrays;

public class arrayRotation {
    public static void main(String[] args){
        int[]arr = {1,2,3,4,5};
        System.out.println(Arrays.toString(arr));
        leftToRight(arr,arr.length,6);
    }

    public static void leftToRight(int[] arr,int n,int d){
        if(d>n){
            System.out.println("d cannot be greater than array length");
            return;
        }
        int[] temp = new int[d];
        //copying d value to temp array
         for(int i=0;i<d;i++){
            temp[i] = arr[i];
        }
        //moving the remaining value 0 - (n-d)
        for(int i=d;i<n;i++){
            arr[i-d] = arr[i];
        }

        for(int i=0;i<d;i++){
            arr[i+n-d] = temp[i];
        }
        System.out.println(Arrays.toString(arr));
    }
}

- the above code has time complexity - O(n)
                     space complexity - O(d)  d - no of rotation

7.Write a program for array rotation with d index rotation using O(1) space complexity
ans:    import java.util.Arrays;
	import java.util.Scanner;
	
	public class arrayRotation2 {
	    public static void main(String[] args){
	        Scanner sc = new Scanner(System.in);
	        int[]arr = {1,2,3,4,5};
	        System.out.print("Enter the no of rotation: ");
	        int d = sc.nextInt();
	        System.out.print("Initial array: ");
	        System.out.println(Arrays.toString(arr));
	        leftToRight(arr,d);
	        System.out.print("Final array: ");
	        System.out.println(Arrays.toString(arr));
	    }
	    public static void leftToRight(int[]arr,int d){
	        for(int i=0;i<d;i++){
	            leftRotateByOne(arr,arr.length);
	        }
	    }
	    public static void leftRotateByOne(int[]arr,int n){
	        int temp,i;
	        temp = arr[0];
	        for(i=0;i<n-1;i++){
	            arr[i] = arr[i+1];
	        }
	        arr[i] = temp;
	    }
	}

above code has time complexity - O(n*d)
               space complexity - O(1)
