1. Write a Java program to create an abstract class Shape with abstract methods calculateArea() and calculatePerimeter(). 
   Create subclasses Rectangle that extend the Shape class and implement the respective methods to calculate the
    area and perimeter of the shape.
ans: public class Main {
        public static void main(String[] args) {
              Circle c1 = new Circle(12);
              System.out.println("Area of Circle: "+c1.calculateArea()+"\nPerimeter of Circle: "+c1.calculatePerimeter());
              Rectangle r1 = new Rectangle(9,6);
              System.out.println("Area of Rectangle: "+r1.calculateArea()+"\nPerimeter of Rectangle: "+r1.calculatePerimeter());
          }
      }
      abstract class Shape{
          abstract double calculateArea();
          abstract double calculatePerimeter();
      }
      class Circle extends Shape{
          double radius;
          Circle(double radius){
              this.radius = radius;
          }
          @Override
          double calculateArea() {
              return 3.144*radius*radius;
          }
      
          @Override
          double calculatePerimeter() {
              return 2*3.144*radius;
          }
      }
      class Rectangle extends Shape{
          double length;
          double width;
          Rectangle(double l,double w){
              this.width = w;
              this.length = l;
          }
          @Override
          double calculateArea() {
              return length*width;
          }
      
          @Override
          double calculatePerimeter() {
              return 2*(length+width);
          }
      }

2. What are the rules for constructor and type of constructor
ans:  The constructor and class must have same name.
      You cannot define an explicit value to a constructor.
      A constructor cannot be any of these: static, synchronized, abstract, or final.
      types of constructor:
      - parameterized constructor
      - default constructor

3. why java is not pure object oriented language
ans: because java has primitive data types, static keyword and wrapper class

4. Write a Java program to create a class called Person with private instance variables name, age. and country.
   Provide public getter and setter methods to access and modify these variables.
ans: public class Encapsulation {
         public static void main(String[] args){
              Person p1 = new Person("Babu",24,"India");
              p1.display();
          }
      }
      class Person{
          private String name;
          private int age;
          private String country;
          public Person(String name, int age, String country) {
              this.name = name;
              this.age = age;
              this.country = country;
          }
          public String getName() {
              return name;
          }
          public void setName(String name) {
              this.name = name;
          }
          public void setAge(int age) {
              this.age = age;
          }
          public String getCountry() {
              return country;
          }
          public void setCountry(String country) {
              this.country = country;
          }
      
          public int getAge() {
              return age;
          }
          void display(){
              System.out.println("name: "+this.getName()+"\nAge: "+this.getAge()+"\nCountry: "+this.getCountry());
          }
      }

5. Write a Java program to create a class called Vehicle with a method called drive().
      Create a subclass called Car that overrides the drive() method to print "Repairing a car".
ans: class Vehicle {
   	public void makeSound() {
   		System.out.println("the vehicle makes Sound");
   	}
      	
      }
      
      class Car extends Vehicle{
      	public void makeSound() {
      		System.out.println("the Car is making Sound");
      	}
      }
      
      public class Main{
      	public static void main(String[] args) {
      		Vehicle v1 = new Vehicle();
      		v1.makeSound();
      		Car c1 = new Car();
      		c1.makeSound();
      	}
      }
6.What is the advantage of Encapsulation?
ans:The encapsulated code is more flexible and easy to change with new requirements.
    It prevents the other classes to access the private fields.
    It keeps the data and codes safe from external inheritance. Thus, Encapsulation helps to achieve security.
    It improves the maintainability of the application.

7.Write a Java program to create a class called Shape with a method called getArea().
  Create a subclass called Rectangle that overrides the getArea() method to calculate the area of a rectangle.
ans: class Shape1 {
     public double getArea() {
      		return 0;
      	}
      }
      
      class Circle extends Shape1{
   	double radius;
   	private double pi = 3.144;
   	Circle(double r){
   		this.radius = r;
   	}
   	public double getArea() {
   		double result = 2*pi*this.radius;
   		return result;
   	}
      }
      
      public class Main{
      	public static void main(String[] args) {
      		Circle c1 = new Circle(12);
      		System.out.println("Area od circle: "+c1.getArea());
      	}
   }

8.How can we acheive encapsulation in java
ans:- we can declare the variable as private in the parent class
    - create public getter and setter methods to manipulate the values of variables.

9.What is Is-A Relationship in Java?
ans: Is-A relationship represents inheritance in java.
     it is implemented using the keyword extends
     example: class A {
                 // statements
               }
               class A extends Object {
                 // statements
               }

10.Why should We Use Inheritance in Java?
ans: We can reuse the code from the parent class.
     Using inheritance, we can increase features of class or method by overriding.
     Inheritance is used to use the existing features of class.
     It is used to achieve runtime polymorphism i.e method overriding.

