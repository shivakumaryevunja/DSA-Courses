1. write a code to Reverse individual words using stacks
ans:  import java.util.Stack;
      public class ReverseStringusingStack {
          public static void main(String[] args){
              String str = "Hello world";
              Stack<Character> st = new Stack<>();
      
              for(int i=0;i<str.length();i++){
                  if(str.charAt(i)!=' '){
                      st.push(str.charAt(i));
                  }else{
                      while(!st.isEmpty()){
                          System.out.print(st.pop());
                      }
                      System.out.print(" ");
                  }
              }
              while(!st.isEmpty()){
                  System.out.print(st.pop());
              }
          }
      }

2. write a code for Revese String using Queue?
ans: import java.util.LinkedList;
      import java.util.*;
      import java.util.Queue;
      //in this we are checking the string is palindrome or not using Queue
      public class ReveseStringusingQueue {
          public static void main(String[] args){
              System.out.print("Enter thr string to check: ");
              Scanner sc = new Scanner(System.in);
              String str = sc.nextLine();
              reverse(str);
          }
      
          public static void reverse(String str){
              Queue q = new LinkedList();
              int n = str.length();
              for(int i=n-1;i>=0;i--){  //iterating from the back and adding the character to Queue
                  q.add(str.charAt(i));
              }
              String reverseString = "";
              while(!q.isEmpty()){  // removing from the Queue and concatenating to the string variable
                  reverseString += q.remove();
              }
      
              if(str.equalsIgnoreCase(reverseString)){
                  System.out.println("The given string is Palindrome");
              }else{
                  System.out.println("NOT Palindrome");
              }
          }
      }

3. Write a program to reverse a stack without using extra space
ans: //Reverse a stack without using extra space and time complexity using O(n)

      class StackNode{
          int data;
          StackNode next;
          StackNode(int d){
              this.data = d;
              this.next = null;
          }
      }
      
      class StackNew {   
          StackNode top;
          public void push(int data) {
              if(this.top == null){
                  top = new StackNode(data);
                  return;
              }
              StackNode s = new StackNode(data);
              s.next = this.top;
              this.top = s;
          }
      
          public StackNode pop(){
              StackNode s = this.top;
              this.top = this.top.next;
              return s;
          }
      
          public void display(){
              StackNode s = this.top;
              while(s!= null){
                  System.out.print(s.data+ " ");
                  s = s.next;
              }
              System.out.println();
          }
      
          public void reverse(){
              StackNode prev,curr,newNext;
              curr = prev = this.top;
              curr = curr.next;
              prev.next = null;
              while(curr != null){
                  newNext = curr.next;
                  curr.next = prev;
                  prev = curr;
                  curr = newNext;
              }
              this.top = prev;
          }
      }
      public class ReverseStackWithoutExptraSpace {
          public static void main(String[] args) {
              StackNew s = new StackNew();
              s.push(1);
              s.push(2);
              s.push(3);
              s.push(4);
              System.out.println("Original Stack");
              s.display();
      
              // reverse
              s.reverse();
      
              System.out.println("Reversed Stack");
              s.display();
          }
      
      }
4. Write a program to sort the elements in queue
ans: import java.util.Queue;
      import java.util.LinkedList;
      public class SortingQueueWithoutExtraSpace {
          //Sorting the elements in the queue without using extra space
      
          public static int minIndex(Queue<Integer> list,
                                     int sortIndex)
          {
              int min_index = -1;
              int min_value = Integer.MAX_VALUE;
              int s = list.size();
              for (int i = 0; i < s; i++)
              {
                  int current = list.peek();
      
                  // This is dequeue()
                  list.poll();
      
                  // we add the condition i <= sortIndex
                  // because we don't want to traverse
                  // on the sorted part of the queue,
                  // which is the right part.
                  if (current <= min_value && i <= sortIndex)
                  {
                      min_index = i;
                      min_value = current;
                  }
                  list.add(current); //here we add the element add the rear
              }
              return min_index;
          }
      
          public static void insertMinToRear(Queue<Integer> list,
                                             int min_index)
          {
              int min_value = 0;
              int s = list.size();
              for (int i = 0; i < s; i++)
              {
                  int current = list.peek();
                  list.poll();
                  if (i != min_index)
                      list.add(current);
                  else
                      min_value = current;
              }
              list.add(min_value);
          }
      
          public static void sortQueue(Queue<Integer> list)
          {
              for(int i = 1; i <= list.size(); i++)
              {
                  int min_index = minIndex(list,list.size() - i);
                  insertMinToRear(list, min_index);
              }
          }
      
      
          public static void main (String[] args)
          {
              Queue<Integer> list = new LinkedList<Integer>();
              list.add(30);
              list.add(11);
              list.add(15);
              list.add(4);
      
              //Sort Queue
              sortQueue(list);
              System.out.println(list);
              //print sorted Queue
              while(list.isEmpty()== false)
              {
                  System.out.print(list.peek() + " ");
                  list.poll();
              }
          }
      }

5. Write a program to implement queue using array
ans: public class ImplementingQueueusingArrays {
          public static void main(String[] args){
              Queue<Integer> queue = new Queue<>(6);
      
              queue.enqueue(22);
              queue.enqueue(44);
              queue.enqueue(66);
              queue.enqueue(77);
      
              queue.queueDisplay();
      
              queue.dequeue();
              System.out.println();
              System.out.println("After removing the first element:");
              queue.queueDisplay();
      
          }
      }
      
      class Queue<T>{
          private int rear, front, capacity;
          private T[] arr;
      
          Queue(int c){
              front = rear = 0;
              this.capacity = c;
              arr = (T[]) new Object[capacity];
          }
      
          public void enqueue(T e){
              if(capacity == rear){
                  System.out.println("Queue is full");
                  return;
              }else{
                  arr[rear] = e;
                  rear++;
              }
              return;
          }
      
          public void dequeue(){
              if(rear == front){
                  System.out.println("Queue is empty");
                  return;
              }else{
                  for(int i=0;i<rear-1;i++){
                      arr[i] = arr[i+1];
                  }
                  arr[rear] = (T) "0";
                  rear--;
              }
              return;
          }
      
          public void queueDisplay(){   //for printing all the elements in the queue
              int i;
              if (front == rear) {
                  System.out.println("Queue is Empty");
                  return;
              }
      
              // traverse front to rear and print elements
              for (i = front; i < rear; i++) {
                  System.out.print( arr[i]+" ");
              }
              return;
          }
      
          public void queueFront()
          {
              if (front == rear) {
                  System.out.println("Queue is Empty");
                  return;
              }
              System.out.println("Front Element is: "+ arr[front]);
              return;
          }
      }
      
