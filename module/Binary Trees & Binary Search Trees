1.write a program to find the key value in the tree using BFS traversal
ans: public class BSTTraversalinBinarytree {
        //in the program searches the key in BST so the time complexity is always (log n)
      public static void main(String[] args){
          BST tree = new BST();
  
          tree.root = new Node2(4);
          tree.root.left = new Node2(2);
          tree.root.right = new Node2(6);
          tree.root.left.left = new Node2(1);
          tree.root.left.right = new Node2(3);
          tree.root.right.left = new Node2(5);
          tree.root.right.right = new Node2(7);
  
          System.out.println("In Order BST: ");
          tree.inOrder(tree.root);
          System.out.println();
          if(tree.searchBST(tree.root,11)){
              System.out.println("The key is present");
          }else{
              System.out.println("Not Found !!");
          }
  
      }
  }
  class Node2{
      int data;
      Node2 right,left;
      Node2(int val){
          this.data = val;
          right = left = null;
      }
  }
  class BST{
      Node2 root;
      BST(){
          root = null;
      }
      //function to print the tree in in-Order traversal
      void inOrder(Node2 node){
          if(node == null){
              return;
          }
          inOrder(node.left);
          System.out.print(node.data+" ");
          inOrder(node.right);
      }
      //function to search the key in BST
      boolean searchBST(Node2 node,int key){
          if(node == null){
             return false;
          }
          if(node.data == key){
              return true;
          }
          if(key < node.data){
              return searchBST(node.left,key);
          }else{
              return searchBST(node.right,key);
          }
      }
  }

2. write a program to represent the binary tree.
ans: public class BinaryTreeRepresntation {
    //Variant traversal in Depth First Search(DFS) :
    //pre-Order, in-Order, post-Order
            public static void main(String[] args){
                Tree tree = new Tree();
                tree.root = new Node(10);
                tree.root.left = new Node(8);
                tree.root.right = new Node(4);
        
                tree.root.left.left = new Node(2);
                tree.root.left.right = new Node(3);
        
        
        
                System.out.print("Pre-Order: ");
                tree.preOrder(tree.root);
                System.out.println();
                System.out.print("In-Order: ");
                tree.inOrder(tree.root);
                System.out.println();
                System.out.print("Post-Order: ");
                tree.postOrder(tree.root);
            }
        }
        
        class Node{
            int data;
            Node left, right;
            Node(int val){
                this.data = val;
                left = right = null;
            }
        }
        
        class Tree{
            Node root;
            Tree(){
                this.root = null;
            }
        
            void preOrder(Node node){
                if(node == null){
                    return;
                }
                System.out.print(node.data+" "); // prints the parent of left and right subtree
        
                preOrder(node.left); //traverse to the left subtree
        
                preOrder(node.right); //traverse to roght subtree
            }
        
            void inOrder(Node node){
                if(node == null){
                    return;
                }
                inOrder(node.left); //traverse to left subtree
        
                System.out.print(node.data+" "); //prints the root of the left and right subtree
        
                inOrder(node.right); //traverse to the right subtree
            }
        
            void postOrder(Node node){
                if(node == null)
                    return;
        
                postOrder(node.left);
        
                postOrder(node.right);
        
                System.out.print(node.data+" ");
            }
        }

3.write a program to insert values to the Binary tree
ans: 
        public class BSTinsertNode {
        
        	public static void main(String[] args) {
        	
        		BST tree = new BST();
        		
        		tree.root = new Node(4);
        		tree.root.left = new Node(2);
        		tree.root.right = new Node(6);
        		tree.root.left.left = new Node(1);
        		
        		tree.root.right.left = new Node(5);
        		tree.root.right.right = new Node(7);
        		
        		System.out.println("Before in-Order BST: ");
        		tree.inOrder(tree.root);
        		System.out.println();
        		
        		tree.insertNode(tree.root, 3);
        		
        		System.out.println("After in-Order BST: ");
        		tree.inOrder(tree.root);
        		System.out.println();
        		tree.insertNode(tree.root, 8);
        		tree.insertNode(tree.root, 9);
        	
        		System.out.println("After in-Order BST: ");
        		tree.inOrder(tree.root);
        		System.out.println();
        		
        	}
        
        }
        class Node{
        	int data;
        	Node left,right;
        	Node(int val){
        		data = val;
        		left = right;
        	}
        }
        
        class BST{
        	Node root;
        	BST(){
        		root = null;
        	}
        	
        	void inOrder(Node node) {
        		if(node == null) {
        			return;
        		}
        		
        		inOrder(node.left);
        		System.out.print(node.data+" ");
        		inOrder(node.right);
        	}
        	
        	Node insertNode(Node node,int key) {
        		if(node == null) {
        			node = new Node(key);
        			return node;
        		}
        		if(key > node.data) {
        			node.right = insertNode(node.right,key);
        		}else if(key < node.data) {
        			node.left = insertNode(node.left,key);
        		}
        		
        		return node;
        	}
        }
        
4. write a program for level order traversal in binary tree
ans:
        import java.util.LinkedList;
        import java.util.Queue;
        
        public class TreeRepresentation {
            static class Node{
                int data;
                Node right;
                Node left;
                Node(int val){
                    this.data = val;
                    this.left = this.right = null;
                }
            }
        
            static class BinaryTree {
                static int idx = -1;
                public static Node createTree(int[] nodes) {
                    idx++;
                    if(nodes[idx] == -1){
                        return null;
                    }
                    Node root = new Node(nodes[idx]);
                    root.left = createTree(nodes);
                    root.right = createTree(nodes);
        
                    return root;
                }
        
                public static void levelOrderTraversal(Node root){
                    if(root == null){
                        return;
                    }
                    Queue<Node> q = new LinkedList<>();
                    q.add(root);
                    q.add(null);
        
                    while(!q.isEmpty()){
                        Node currNode = q.remove();
                        if(currNode == null){
                           System.out.println();
        
                           if(q.isEmpty()){
                              break;
                           }else{
                               q.add(null);
                           }
                        }else{
                            System.out.print(currNode.data+" ");
                            if(currNode.left != null){
                                q.add(currNode.left);
                            }
                            if(currNode.right != null){
                                q.add(currNode.right);
                            }
                        }
                    }
                }
            }
            public static void main(String[] args){
                int nodes[] = {1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1};
                /*binary tree
                        1
                      /   \
                     2     3
                   /  \      \
                  4    5      6    */
                BinaryTree tree = new BinaryTree();
                Node root = tree.createTree(nodes);
                tree.levelOrderTraversal(root);
            }
        }

5.write program to count the number of nodes in the tree
ans:

        import java.util.LinkedList;
        import java.util.Queue;
        
        public class TreeRepresentation {
            static class Node{
                int data;
                Node right;
                Node left;
                Node(int val){
                    this.data = val;
                    this.left = this.right = null;
                }
            }
        
            static class BinaryTree {
                static int idx = -1;
                public static Node createTree(int[] nodes) {
                    idx++;
                    if(nodes[idx] == -1){
                        return null;
                    }
                    Node root = new Node(nodes[idx]);
                    root.left = createTree(nodes);
                    root.right = createTree(nodes);
        
                    return root;
                }
               
                public static int countNodes(Node root){
                     if(root == null){
                         return  0;
                     }
                     int leftNode = countNodes(root.left);
                     int rightNode = countNodes(root.right);
        
                     return leftNode+rightNode+1;
                }
            }
            public static void main(String[] args){
                int nodes[] = {1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1};
                /*binary tree
                        1
                      /   \
                     2     3
                   /  \      \
                  4    5      6    */
                BinaryTree tree = new BinaryTree();
                Node root = tree.createTree(nodes);
        
                System.out.println("Count of Nodes: "+tree.countNodes(root));
            }
        }
        
